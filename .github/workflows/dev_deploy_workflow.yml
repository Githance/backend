name: dev.githance workflow

on:
  push:
    branches:
      - feature/deploy

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.10.5

    - name: Install dependencies
      run: | 
        python -m pip install --upgrade pip 
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
        pip install -r requirements.txt

    - name: Test with flake8
      run: |
        python -m flake8

#  build-and-push-image-to-github-packages:
#    name: Push Docker image to GitHub Packages
#    runs-on: ubuntu-latest
#    needs: tests
#    permissions:
#      contents: read
#      packages: write
#    steps:
#      -
#        name: Checkout
#        uses: actions/checkout@v2
#      -
#        name: Docker login
#        uses: docker/login-action@v1
#        with:
#          registry: ${{ env.REGISTRY }}
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#      -
#        name: Set variables
#        run: |
#          echo REP_OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV
#      -
#        name: Build and push
#        uses: docker/build-push-action@v2
#        with:
#          context: .
#          file: Dockerfile
#          labels: runnumber=${GITHUB_RUN_ID}
#          push: true
#          tags: |
#            ${{ env.REGISTRY }}/${{ env.REP_OWNER }}/${{ env.IMAGE_NAME }}:dev,
#            ${{ env.REGISTRY }}/${{ env.REP_OWNER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

#  deploy:
#      runs-on: ubuntu-latest
#      needs:
#        - build-and-push-image-to-github-packages
#      steps:
#        - name: executing remote ssh commands to deploy
#          uses: appleboy/ssh-action@master
#          with:
#            host: ${{ secrets.HOST }}
#            username: ${{ secrets.USER }}
#            key: ${{ secrets.SSH_KEY }}
#            passphrase: ${{ secrets.PASSPHRASE }}
#            script: |
#              docker-compose stop
#              docker-compose rm web
#              rm .env
#              touch .env
#              echo DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }} >> .env
#              echo CSRF_TRUSTED_ORIGINS=${{ secrets.CSRF_TRUSTED_ORIGINS }} >> .env
#              echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
#              echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
#              echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
#              echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
#              echo DB_HOST=${{ secrets.DB_HOST }} >> .env
#              echo DB_PORT=${{ secrets.DB_PORT }} >> .env
#              docker-compose up -d
#              docker-compose exec -T backend python manage.py migrate
#              docker-compose exec -T backend python manage.py collectstatic --no-input
