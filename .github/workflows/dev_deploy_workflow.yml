name: dev.githance workflow

on:
  push:
    branches:
      - dev

env:
  REGISTRY: ghcr.io
  DEPLOY_PATH: GITHANCE_DEV
  DB_ENGINE: django.db.backends.postgresql
  DB_HOST: db_dev
  DB_PORT: 5432
  BACK_HOST: backend_dev

jobs:
  tests:
    name: Testing
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10.5

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements_dev.txt

    - name: Running tests
      run: |
        isort --check .
        black --check .
        flake8 .

  delivery-new-build:
    name: Delivery new build
    runs-on: ubuntu-latest
    needs: tests
    permissions:
      contents: read
      packages: write
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Docker login
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Set variables
        run: |
          echo REP_OWNER=$(echo ${{ github.REPOSITORY }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV
      -
        name: Build image and push to GitHub Packages
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          target: dev_build
          labels: runnumber=${GITHUB_RUN_ID}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REP_OWNER }}:dev,
            ${{ env.REGISTRY }}/${{ env.REP_OWNER }}:${{ github.sha }}
      -
        name: Copy infra files via ssh
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SRV_HOST }}
          username: ${{ secrets.SRV_USER }}
          key: ${{ secrets.SRV_SSH_KEY }}
          passphrase: ${{ secrets.SRV_SSH_PASSPHRASE }}
          source: "infra/deploy_dev/"
          rm: true
          strip_components: 2
          target: ~/${{ env.DEPLOY_PATH }}/deploy_tmp
  deploy:
      name: Deploy
      runs-on: ubuntu-latest
      needs:
        - delivery-new-build
      environment:
        name: dev_deploy
      steps:
        -
          name: Executing deploy via ssh
          uses: appleboy/ssh-action@master
          with:
            host: ${{ secrets.SRV_HOST }}
            username: ${{ secrets.SRV_USER }}
            key: ${{ secrets.SRV_SSH_KEY }}
            passphrase: ${{ secrets.SRV_SSH_PASSPHRASE }}
            script: |
              cd ${{ env.DEPLOY_PATH }}
              ls --hide=deploy_tmp | xargs -d '\n' rm -r
              cp -r deploy_tmp/* .

              echo "IMAGE_BACK=${{ vars.IMAGE_BACK }}" > .github_vars
              echo "IMAGE_BACK_TAG=${{ vars.IMAGE_BACK_TAG }}" >> .github_vars

              echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" > .env

              echo "DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }}" >> .env
              echo "DJANGO_CORS_ALLOWED_ORIGINS=${{ secrets.DJANGO_CORS_ALLOWED_ORIGINS }}" >> .env

              echo "DB_ENGINE=${{ env.DB_ENGINE }}" >> .env
              echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
              echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
              echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env

              echo "DJANGO_GOOGLE_CLIENT_ID=${{ secrets.DJANGO_GOOGLE_CLIENT_ID }}" >> .env
              echo "DJANGO_GOOGLE_SECRET=${{ secrets.DJANGO_GOOGLE_SECRET }}" >> .env
              echo "DJANGO_ALLOW_GOOGLE_CODE_FROM_LOCALHOST_3000=${{ vars.DJANGO_ALLOW_GOOGLE_CODE_FROM_LOCALHOST_3000 }}" >> .env

              echo "DJANGO_EMAIL_BACKEND=${{ vars.DJANGO_EMAIL_BACKEND }}" >> .env
              echo "DJANGO_EMAIL_HOST_USER=${{ vars.DJANGO_EMAIL_HOST_USER }}" >> .env
              echo "DJANGO_EMAIL_HOST=${{ secrets.DJANGO_EMAIL_HOST }}" >> .env
              echo "DJANGO_EMAIL_HOST_PASSWORD=${{ secrets.DJANGO_EMAIL_HOST_PASSWORD }}" >> .env

              echo "DB_HOST=${{ env.DB_HOST }}" >> .env
              echo "DB_PORT=${{ env.DB_PORT }}" >> .env

              chmod 600 .env .github_vars

              docker compose -f docker-compose_dev.yaml --env-file .github_vars pull
              docker compose -f docker-compose_dev.yaml --env-file .github_vars down
              docker volume rm -f staticfiles_dev staticfiles
              docker compose -f docker-compose_dev.yaml --env-file .github_vars up --detach

              docker compose  -f docker-compose_dev.yaml --env-file .github_vars exec -T backend python manage.py migrate
              docker compose  -f docker-compose_dev.yaml --env-file .github_vars exec -T backend python manage.py collectstatic --no-input

              docker image prune
