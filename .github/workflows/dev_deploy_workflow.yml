name: dev.githance workflow

on:
  push:
    branches:
      - feature/deploy

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: githance_backend
  DEPLOY_PATH: GITHANCE
  DB_ENGINE: django.db.backends.postgresql
  DB_HOST: db_dev
  DB_PORT: 5432
  BACK_HOST: backend_dev

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10.5

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
        pip install -r requirements.txt

    - name: Test with flake8
      run: |
        python -m flake8

  delivery-new-build:
    name: Delivery new build
    runs-on: ubuntu-latest
    needs: tests
    permissions:
      contents: read
      packages: write
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Docker login
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Set variables
        run: |
          echo REP_OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV
      -
        name: Build image and push to GitHub Packages
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          labels: runnumber=${GITHUB_RUN_ID}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REP_OWNER }}/${{ env.IMAGE_NAME }}:dev,
            ${{ env.REGISTRY }}/${{ env.REP_OWNER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
      -
        name: Copy infra files via ssh
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SRV_HOST }}
          username: ${{ secrets.SRV_USER }}
          key: ${{ secrets.SRV_SSH_KEY }}
          passphrase: ${{ secrets.SRV_SSH_PASSPHRASE }}
          source: "infra/deploy_dev/"
          target: ~/${{ env.DEPLOY_PATH }}

  deploy:
      runs-on: ubuntu-latest
      needs:
        - delivery-new-build
      environment:
        name: dev_deploy
      steps:
        -
          name: Executing deploy via ssh
          uses: appleboy/ssh-action@master
          with:
            host: ${{ secrets.SRV_HOST }}
            username: ${{ secrets.SRV_USER }}
            key: ${{ secrets.SRV_SSH_KEY }}
            passphrase: ${{ secrets.SRV_SSH_PASSPHRASE }}
            script: |
              cd ${{ env.DEPLOY_PATH }}
              cp -r infra/deploy_dev/* .
              
              # echo "IMAGE_BACK=${{ env.IMAGE_NAME }}" > .github_vars
              # echo "IMAGE_BACK_TAG=${{ github.sha }}" >> .github_vars
              echo "IMAGE_BACK=ghcr.io/ridmel/githance_backend" > .github_vars
              echo "IMAGE_BACK_TAG=dev" >> .github_vars
              # echo "IMAGE_FRONT=${{ secrets.IMAGE_FRONT }}" >> .github_vars
              # echo "IMAGE_FRONT_TAG=${{ secrets.IMAGE_FRONT_TAG }}" >> .github_vars
              # echo "FRONT_BASE_URL=${{ secrets.FRONT_BASE_URL }}" >> .github_vars
              # echo "API_BASE_URL=${{ secrets.API_BASE_URL }}" >> .github_vars
              # echo "SUBDOMAIN=${{ secrets.SUBDOMAIN }}" >> .github_vars
              chmod 600 .github_vars

              echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" > .env
              echo "DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }}" >> .env
              echo "DJANGO_CORS_ALLOWED_ORIGINS=${{ secrets.DJANGO_CORS_ALLOWED_ORIGINS }}" >> .env
              echo "DB_ENGINE=${{ env.DB_ENGINE }}" >> .env
              echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
              echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
              echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
              echo "DJANGO_GOOGLE_CLIENT_ID=${{ secrets.DJANGO_GOOGLE_CLIENT_ID }}" >> .env
              echo "DJANGO_GOOGLE_SECRET=${{ secrets.DJANGO_GOOGLE_SECRET }}" >> .env
              echo "DB_HOST=${{ env.DB_HOST }}" >> .env
              echo "DB_PORT=${{ env.DB_PORT }}" >> .env
              chmod 600 .env

              docker compose -f docker-compose_dev.yaml --env-file .github_vars pull
              docker compose -f docker-compose_dev.yaml --env-file .github_vars stop
              #docker network rm nginx_network
              #docker network rm private_network_dev
              # TODO:  при разработке prod nginx_network вынести в прод
              #docker network create nginx_network || true
              #docker network create private_network_dev || true
              docker compose -f docker-compose_dev.yaml --env-file .github_vars rm ${{ env.BACK_HOST }}
              docker compose -f docker-compose_dev.yaml --env-file .github_vars up -d
              docker compose  -f docker-compose_dev.yaml --env-file .github_vars exec -T backend python manage.py migrate
              docker compose  -f docker-compose_dev.yaml --env-file .github_vars exec -T backend python manage.py collectstatic --no-input
